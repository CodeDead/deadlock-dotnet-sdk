using System.Diagnostics;
using PInvoke;
using Code = PInvoke.NTSTATUS.Code;
using FacilityCode = PInvoke.NTSTATUS.FacilityCode;
/// <summary>
/// This file supplements code generated by CsWin32
/// </summary>
namespace Windows.Win32.Foundation;

[DebuggerDisplay("{Code}")]
readonly partial struct NTSTATUS
{
    public bool IsSuccessful => SeverityCode is Severity.Success;

    /// <summary>Throws an exception if a P/Invoke failed.</summary>
    /// <exception cref="NTStatusException">If SeverityCode is Error, an exception detailing the NTSTATUS error code including the platform-dependent, native error message.</exception>
    public void ThrowOnError()
    {
        if (SeverityCode == Severity.Error)
            throw new NTStatusException(this);
    }

    public Code Code => (Code)Value;
    public FacilityCode FacilityCode => ((global::PInvoke.NTSTATUS)this).Facility;
    /* property SeverityCode is defined in generated code */
    /// <inheritdoc cref="Kernel32Extensions.GetMessage(global::PInvoke.NTSTATUS)"/>
    public string Message => ((global::PInvoke.NTSTATUS)this).GetMessage();

    public static implicit operator global::PInvoke.NTSTATUS(NTSTATUS v) => new(v.Value);
    public static implicit operator NTSTATUS(global::PInvoke.NTSTATUS v) => new(v.AsInt32);

    public static implicit operator Code(NTSTATUS v) => v.Code;
    public static implicit operator NTSTATUS(Code v) => new((int)v);
}
