/// This file supplements code generated by CsWin32
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Windows.Win32.Foundation;

/// <summary>
/// The UNICODE_STRING structure is used to define Unicode strings.
/// </summary>
/// <remarks>
/// <para>The UNICODE_STRING structure is used to pass Unicode strings. Use RtlUnicodeStringInit or RtlUnicodeStringInitEx to initialize a UNICODE_STRING structure.</para>
/// <para>If the string is null-terminated, Length does not include the trailing null character.</para>
/// <para>The MaximumLength is used to indicate the length of Buffer so that if the string is passed to a conversion routine such as RtlAnsiStringToUnicodeString the returned string does not exceed the buffer size.</para>
/// <para>
/// - Length -- the length of the string in bytes.
/// - MaximumLength -- the length of Buffer in bytes.
/// - Buffer -- the address of the string.
/// </para>
/// </remarks>
partial struct UNICODE_STRING : IDisposable
{
    public UNICODE_STRING(ushort maximumLength, PWSTR buffer)
    {
        Length = (ushort)buffer.Length;
        MaximumLength = maximumLength;
        Buffer = buffer;
    }
    public UNICODE_STRING(ushort maximumLength)
    {
        Length = 0;
        MaximumLength = maximumLength;
        Buffer = Marshal.AllocHGlobal(maximumLength);
    }

    public uint CharCount => (uint)Length / 2;

    public void Dispose()
    {
        Buffer.Dispose();
    }

    /// <summary>
    /// Allocates a managed string and copies `(Length / 2)` number of characters from an unmanaged Unicode string into it.
    /// </summary>
    public unsafe string ToStringLength()
    {
        try
        {
            _ = *Buffer.Value;
            return new ReadOnlySpan<char>(Buffer.Value, (int)CharCount).ToString();
        }
        catch (Exception e)
        {
            Debugger.Break();
            throw new Exception("Failed to read string from memory pointer.", e);
        }
    }

    public string? ToStringZ() => Buffer.ToString();
    public static explicit operator string(UNICODE_STRING v) => v.ToStringLength();
}
